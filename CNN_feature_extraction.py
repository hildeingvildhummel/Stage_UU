"""https://www.quora.com/How-can-I-train-a-SVM-model-using-features-from-CNN-in-Keras"""
from keras.preprocessing import image
import numpy as np
from keras.applications.vgg16 import VGG16, preprocess_input
import cv2
import keras.backend as K
from keras.models import Sequential


def extract_VGG16(points, image, yard_stick_distance):
    """This function extracts the features generated by the VGG16 model, trained on ImageNet. It removes the upper softmax layer and resizes the Region Of Interest (ROI) by 244 x 244.
    It uses the landmarks to locate the bounding box of the ROI.
    Input:
    - points: a numpy array containing the landmarks coordinates describing the region of interest
    - image: The image containing the ROI
    - yard_stick_distance: The normalization distance of the face
    Output:
    - vector of 4096 generated by the VGG 16 model. """
    #select the bouding box around the landmarks of interest
    x,y,w,h = cv2.boundingRect(points)
    # make the coordinates abs() to prevent errors and add the margin
    y = int(max(0, y - 0.01 * yard_stick_distance))
    x = int(max(0, x - 0.01 * yard_stick_distance))

    w = int(abs(w) + 0.01 * yard_stick_distance)
    h = int(abs(h) + 0.01 * yard_stick_distance)
    # select the part of the image filtered by the bounding box as the region of interest
    ROI = image[y:y+h,x:x+w]
    #Resize the ROI to 244 x 244
    ROI = cv2.resize(ROI, (224, 224))
    # load the pretrained model
    vgg16_model = VGG16(weights = 'imagenet')
    #create an empty sequantial model to assign the VGG16 layers to
    model = Sequential()
    #Iterate over all the layers of the VGG16 model except the upper softmax layer
    for layer in vgg16_model.layers[:-1]:
        #add all the layers to the empty sequantial model except for the upper layer
        model.add(layer)

    #Create the input of the model
    x = ROI
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)

    # extract features
    features = model.predict(x)
    features = np.squeeze(features, axis = 0)
    print('CNN feature length ', features.shape)
    #Clear the session to prevent memory leak.
    K.clear_session()
    #return the features, a 4096 vector
    return features
